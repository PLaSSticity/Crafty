//===----------------------------------------------------------------------===//
//          Steps for building TinySTM - Transactional Memory library
//===----------------------------------------------------------------------===//

//===----------------------- Contact

Contact information: Patrick Marlier
                     Pascal Felber

//===-----------------------  Introduction

The TM runtime (also referred to as runtime library) is the central component 
of the TM integrated stack. It implements the synchronization logic of the TM. 
VELOX C/C++ STM Runtime Library: TinySTM is the official VELOX STM and was 
chosen for its simplicity and performance.

The TinySTM runtime has been continuously developed since the beginning of the 
project. At the end of Release 0, it already supported most applications but did 
not have ABI compatibility (i.e., no integration with compiler) and was missing 
some features. At the end of Release 1, TinySTM had ABI support and compiler 
integration, as well as additional features such as memory management and 
nesting. In Release 2, we release version 1.0.1 with support for irrevocability
and with  a hybrid variant of TinySTM that incorporates ASF (ASF-TM). 
In Release 3, we finally release version 1.0.2 with minor fixes and support for 
Event Processing Engine.

For more information on on-going development, go to: 
http://www.tmware.org

//===-----------------------  System requirements

   - Operating system: The library is designed to run on Linux.

   - Processor: The library requires either an x86-compatible (IA32, or 
   Intel64) processor except in the case of the Hybrid ASF library that 
   requires an Intel64 processor.
   
   - Compiler: The source code is C conforming to POSIX and ANSI C99 standards. 
   It should compile with the GNU GCC or LLVM/LLVM-GCC.
   
   - Libs and other inst req.: the library requires libatomic_ops which is also 
   embedded inside the source.

//===----------------------- Contents

   TinySTM is composed of 2 parts : 
      - the core system
      - the abi compatibility

   The core system is the implementation of the Transactional Memory (Software 
   and Hybrid using the Lazy Snapshot Algorithm) whereas the abi compatibility 
   is just an overlay to provide  standardized functions to transactional 
   compilers. 



//===----------------------- Installation


1.- Configure, compile and install TinySTM Core library

   TinySTM Core library is the core of the TM library and it is not ABI compatible.
   
   Unzip the compressed file:
   
      > tar xjf tinySTM-??.tar.bz2
   
   To compile the core transactional library:
   
      > cd tinySTM-??
      > make
      
   To compile a test suite (optional):
   
     > make test 

   To run a test suite to make sure everything work (optional):

     > make check

   All these tests should pass.

2.- Configure and compile ABI compatibility

   TinySTM ABI provides compatibility with :
   
      - DTMC
      - GCC with TM Support
      - Intel C STM Compiler 3.0

   To compile transactional libraries with ABI compatibility:
   (require GCC and LLVM/LLVM-GCC in the environment variables
   PATH, LD_LIBRARY_PATH and LD_RUN_PATH):

     > make abi

   Libraries for the different compilers are located in "abi" directory and in:
     
      - for DTMC, "dtmc" directory
      - for GCC with TM support, "gcc" directory
      - for Intel C STM Compiler, "intel" directory


   To compile and run a test suite for ABI to make sure all is well, you can optionally do:

     > make abi-check

   (This test will *not* require a Compiler with TM support since it only checks the library
   accordingly to the ABI Specifications. Advanced tests with TM Compilers can be done, see
   "Makefile targets" Section)

   All these tests should pass.

   We don't have any install rules yet.

2.a.- TinySTM with AMD ASF

   To compile the hybrid TM library using AMD ASF, you just need to add HYBRID_ASF define 
   at the make command line (or in a environment variable).
   
   For example, to compile ABI libraries with Hybrid Support:

     > make HYBRID_ASF=1 abi 

   To run the generated library, it requires an ASF instructions emulator or an ASF CPU 
   simulator.

//===----------------------- Makefile targets

1.- TinySTM Core library

    - all: Builds everything. Same as just saying make.
    - test: Compile test suites (basic tests and integer set benchmarks).
    - check: Runs automated test suites (basic tests and integer set benchmarks).
    - clean: Removes all files generated by compilation.


2.- TinySTM ABI library

    - abi: Compile libraries for all tm-compilers (require llvm-gcc in the PATH for DTMC)
    - abi-test: Compile integer set benchmarks using explicit calls to ABI library
    - abi-check: Test integer set benchmarks using explicit calls to ABI library
    - abi-clean: Clean the abi directory and sub-directories

  2.a.- TinySTM ABI library for GCC with TM support
  
    - abi-gcc: Compile library for GCC with TM support 
    - abi-gcc-test: Compile integer set benchmarks using GCC with TM support
      (requires GCC with TM support in the PATH or define TESTCC and TESTLD to it)
    - abi-gcc-check: Test integer set benchmarks using GCC with TM support
    - abi-gcc-clean: Clean the abi/gcc directory

  Note: all generated files (libraries and test binaries) are located into abi/gcc/ directory.

  Note: if your GCC-TM is in your PATH but it still complains about unsupported 
  -fgnu-tm, try set CC environment variable to gcc.


  2.b.- TinySTM ABI library for DTMC
  
    - abi-dtmc: Compile library for DTMC 
    - abi-dtmc-test: Compile integer set benchmarks using DTMC
      (requires DTMC, ie LLVM/LLVM-GCC in the path and the TANGERDIR environment variable 
      set to the directory of DTMC)
    - abi-dtmc-check: Test integer set benchmarks 
    - abi-dtmc-clean: Clean the abi/dtmc directory

  Note: TANGERDIR can be also set inside the make command.


   2.c.- TinySTM ABI library for Intel STM C Compiler
   
    - abi-intel: Compile library for Intel STM C Compiler
    - abi-intel-test: Compile integer set benchmarks using Intel STM C Compiler
      (requires Intel STM C Compiler, ie icc in the path)
    - abi-intel-check: Test integer set benchmarks 
    - abi-intel-clean: Clean the abi/intel directory

   2.d.- TinySTM ABI library for all supported TM compilers
   
    - abi-test-all: Compile integer set benchmarks for all tm-compilers
    - abi-check-all: Test integer set benchmarks for all tm-compilers

   Note that it could be difficult to set all required PATH and environment 
   variables to compile with all tm-compilers. It could be better to proceed by 
   steps.


//===----------------------- Workarounds for some unusual configure/compilation problems
 1.- libatomic_ops bugs
 
  If you want to use your own libatomic_ops, make sure that your version is not buggy 
  (check for details 
  http://bdwgc.cvs.sourceforge.net/viewvc/bdwgc/bdwgc/libatomic\_ops/ChangeLog?revision=1.21\&view=markup).

   1.a.- Hybrid Library.
    If you want to use Hybrid library, you must use the ptlsim simulator for ASF 
    instructions otherwise you will encounter a "Illegal Instruction" issue.

   1.b.- 32 bits libraries
     Example of command for gcc (on a 64bit environment):
     
     TESTCFLAGS=-m32 TESTLDFLAGS=-m32 CFLAGS=-m32 LDFLAGS=-m32 make CFG=debug clean abi-gcc-check


//===----------------------- VELOX project

European research consortium VELOX supports programming of multi-core systems

Research project will aim to make parallel programming easier for 
the masses by developing integrated Transactional Memory systems 
for multi-core computers.

This document was prepared by Javier Arias. If you have any comment or 
suggestion feel free to send an email to javier.arias@bsc.es.
